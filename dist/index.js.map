{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isComplex128Array = require( '@stdlib/array-base-assert-is-complex128array' );\nvar isComplex64Array = require( '@stdlib/array-base-assert-is-complex64array' );\nvar isBooleanArray = require( '@stdlib/array-base-assert-is-booleanarray' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n\n\n// VARIABLES //\n\nvar METHOD_TABLE = {\n\t'float64': 'setFloat64',\n\t'float32': 'setFloat32',\n\t'float16': 'setFloat16',\n\t'int64': 'setBigInt64',\n\t'int32': 'setInt32',\n\t'int16': 'setInt16',\n\t'int8': 'setInt8',\n\t'uint64': 'setBigUint64',\n\t'uint32': 'setUint32',\n\t'uint16': 'setUint16',\n\t'uint8': 'setUint8'\n};\n\n\n// FUNCTIONS //\n\n/**\n* Copies elements from an input strided indexed array to elements in a strided DataView.\n*\n* @private\n* @param {string} dtype - input array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {boolean} littleEndian - boolean indicating whether to store the data in little-endian format\n* @returns {DataView} output DataView\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 0.0, 1.0, 0.0 ] );\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = indexed( 'float64', 4, arraylike2object( x ), 1, 0, view, 8, 0, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\nfunction indexed( dtype, N, x, strideX, offsetX, view, strideView, offsetView, littleEndian ) {\n\tvar data;\n\tvar ix;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\n\tdata = x.data;\n\n\tix = offsetX;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tview[ m ]( iv, data[ ix ], littleEndian );\n\t\tix += strideX;\n\t\tiv += strideView;\n\t}\n\treturn view;\n}\n\n/**\n* Copies elements from an input strided complex array to elements in a strided DataView.\n*\n* @private\n* @param {string} dtype - input array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array object\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {boolean} littleEndian - boolean indicating whether to store the data in little-endian format\n* @returns {DataView} output DataView\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 0.0, 1.0, 0.0 ] );\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = complex( 'float64', 2, arraylike2object( x ), 1, 0, view, 8, 0, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\nfunction complex( dtype, N, x, strideX, offsetX, view, strideView, offsetView, littleEndian ) {\n\tvar nbytes;\n\tvar data;\n\tvar ix;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\tnbytes = bytesPerElement( dtype );\n\n\tdata = x.data;\n\n\t// Adjust meta data to account for interleaved real and imaginary components:\n\tstrideX *= 2;\n\toffsetX *= 2;\n\n\tix = offsetX;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tview[ m ]( iv, data[ ix ], littleEndian );\n\t\tview[ m ]( iv+nbytes, data[ ix+1 ], littleEndian );\n\t\tix += strideX;\n\t\tiv += strideView;\n\t}\n\treturn view;\n}\n\n/**\n* Copies elements from an input strided accessor array to elements in a strided DataView.\n*\n* @private\n* @param {string} dtype - input array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {boolean} littleEndian - boolean indicating whether to store the data in little-endian format\n* @returns {DataView} output DataView\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = arraylike2object( toAccessorArray( [ 1.0, 2.0, 3.0, 4.0 ] ) );\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = accessors( 'float64', 4, x, 1, 0, view, 8, 0, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\nfunction accessors( dtype, N, x, strideX, offsetX, view, strideView, offsetView, littleEndian ) {\n\tvar data;\n\tvar get;\n\tvar ix;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\n\tdata = x.data;\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tview[ m ]( iv, get( data, ix ), littleEndian );\n\t\tix += strideX;\n\t\tiv += strideView;\n\t}\n\treturn view;\n}\n\n\n// MAIN //\n\n/**\n* Copies elements from an input strided array to elements in a strided DataView.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {boolean} littleEndian - boolean indicating whether to store the data in little-endian format\n* @returns {DataView} output DataView\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0 ];\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = writeDataView( 4, x, 1, 0, view, 8, 0, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\nfunction writeDataView( N, x, strideX, offsetX, view, strideView, offsetView, littleEndian ) {\n\tvar obj;\n\tvar dt;\n\tif ( N <= 0 ) {\n\t\treturn view;\n\t}\n\tobj = arraylike2object( x );\n\tif ( obj.accessorProtocol ) {\n\t\t// If provided a complex number array, reinterpret as a real typed array of interleaved real and imaginary components...\n\t\tif ( isComplex128Array( x ) ) {\n\t\t\tobj.data = reinterpret128( x, 0 );\n\t\t\treturn complex( 'float64', N, obj, strideX, offsetX, view, strideView, offsetView, littleEndian );\n\t\t}\n\t\tif ( isComplex64Array( x ) ) {\n\t\t\tobj.data = reinterpret64( x, 0 );\n\t\t\treturn complex( 'float32', N, obj, strideX, offsetX, view, strideView, offsetView, littleEndian );\n\t\t}\n\t\t// If provided a boolean array, reinterpret as typed array of integers...\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\tobj.data = reinterpretBoolean( x, 0 );\n\t\t\treturn indexed( 'uint8', N, obj, strideX, offsetX, view, strideView, offsetView, littleEndian );\n\t\t}\n\t\t// If provided a \"generic\" accessor array, assume double-precision floating-point numbers...\n\t\treturn accessors( 'float64', N, obj, strideX, offsetX, view, strideView, offsetView, littleEndian );\n\t}\n\tif ( obj.dtype === null || obj.dtype === 'generic' ) {\n\t\t// If provided a \"generic\" array, assume double-precision floating-point numbers...\n\t\tdt = 'float64';\n\t} else {\n\t\tdt = obj.dtype;\n\t}\n\treturn indexed( dt, N, obj, strideX, offsetX, view, strideView, offsetView, littleEndian );\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeDataView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Copies elements from an input strided array to elements in a strided DataView.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {boolean} littleEndian - boolean indicating whether to store the data in little-endian format\n* @returns {DataView} output DataView\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0 ];\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = writeDataView( 4, x, 1, view, 8, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\nfunction writeDataView( N, x, strideX, view, strideView, littleEndian ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), view, strideView, stride2offset( N, strideView ), littleEndian ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeDataView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Copy elements from an input strided array to elements in a strided DataView.\n*\n* @module @stdlib/strided-base-write-dataview\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var writeDataView = require( '@stdlib/strided-base-write-dataview' );\n*\n* var x = [ 1, 0, 1, 0 ];\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = writeDataView( 4, x, 1, view, 8, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var writeDataView = require( '@stdlib/strided-base-write-dataview' );\n*\n* var x = [ 1, 0, 1, 0 ];\n*\n* var buf = new ArrayBuffer( 32 );\n* var view = new DataView( buf );\n*\n* var out = writeDataView.ndarray( 4, x, 1, 0, view, 8, 0, true );\n* // returns <DataView>\n*\n* var bool = ( out === view );\n* // returns true\n*\n* var v = view.getFloat64( 0, true );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "isComplex128Array", "isComplex64Array", "isBooleanArray", "arraylike2object", "reinterpret128", "reinterpret64", "reinterpretBoolean", "bytesPerElement", "METHOD_TABLE", "indexed", "dtype", "N", "x", "strideX", "offsetX", "view", "strideView", "offsetView", "littleEndian", "data", "ix", "iv", "m", "i", "complex", "nbytes", "accessors", "get", "writeDataView", "obj", "dt", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "writeDataView", "N", "x", "strideX", "view", "strideView", "littleEndian", "setReadOnly", "main", "ndarray"]
}
